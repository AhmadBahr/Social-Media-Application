{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ATTO\\\\Desktop\\\\New folder\\\\Social-Media-Application\\\\client\\\\src\\\\scenes\\\\widgets\\\\FriendListWidget.jsx\",\n  _s = $RefreshSig$();\nimport { Box, Typography, useTheme } from \"@mui/material\";\nimport Friend from \"components/Friend\";\nimport WidgetWrapper from \"components/WidgetWrapper\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFriends } from \"state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FriendListWidget = ({\n  userId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    palette\n  } = useTheme();\n  const token = useSelector(state => state.token);\n  const friends = useSelector(state => state.user.friends);\n\n  // Mock data for three friends\n  const mockFriends = [{\n    _id: \"1\",\n    firstName: \"John\",\n    lastName: \"Doe\",\n    occupation: \"Software Engineer\",\n    picturePath: \"/images/john.jpg\"\n  }, {\n    _id: \"2\",\n    firstName: \"Jane\",\n    lastName: \"Doe\",\n    occupation: \"Graphic Designer\",\n    picturePath: \"/images/jane.jpg\"\n  }, {\n    _id: \"3\",\n    firstName: \"Alice\",\n    lastName: \"Smith\",\n    occupation: \"Data Scientist\",\n    picturePath: \"/images/alice.jpg\"\n  }];\n  const getFriends = async () => {\n    // Simulate fetching friends data from the server\n    // In a real application, you would replace this with actual API calls\n    // For now, we'll just set the state with the mock data\n    dispatch(setFriends({\n      friends: mockFriends\n    }));\n  };\n  useEffect(() => {\n    getFriends();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(WidgetWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      color: palette.neutral.dark,\n      variant: \"h5\",\n      fontWeight: \"500\",\n      sx: {\n        mb: \"1.5rem\"\n      },\n      children: \"Friend List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1.5rem\",\n      children: friends.map(friend => /*#__PURE__*/_jsxDEV(Friend, {\n        friendId: friend._id,\n        name: `${friend.firstName} ${friend.lastName}`,\n        subtitle: friend.occupation,\n        userPicturePath: friend.picturePath\n      }, friend._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(FriendListWidget, \"wBorfTpf09wby8S5yWBW9rvMuVk=\", false, function () {\n  return [useDispatch, useTheme, useSelector, useSelector];\n});\n_c = FriendListWidget;\nexport default FriendListWidget;\nvar _c;\n$RefreshReg$(_c, \"FriendListWidget\");","map":{"version":3,"names":["Box","Typography","useTheme","Friend","WidgetWrapper","useEffect","useDispatch","useSelector","setFriends","jsxDEV","_jsxDEV","FriendListWidget","userId","_s","dispatch","palette","token","state","friends","user","mockFriends","_id","firstName","lastName","occupation","picturePath","getFriends","children","color","neutral","dark","variant","fontWeight","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","map","friend","friendId","name","subtitle","userPicturePath","_c","$RefreshReg$"],"sources":["C:/Users/ATTO/Desktop/New folder/Social-Media-Application/client/src/scenes/widgets/FriendListWidget.jsx"],"sourcesContent":["import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport Friend from \"components/Friend\";\r\nimport WidgetWrapper from \"components/WidgetWrapper\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setFriends } from \"state\";\r\n\r\nconst FriendListWidget = ({ userId }) => {\r\n  const dispatch = useDispatch();\r\n  const { palette } = useTheme();\r\n  const token = useSelector((state) => state.token);\r\n  const friends = useSelector((state) => state.user.friends);\r\n\r\n  // Mock data for three friends\r\n  const mockFriends = [\r\n    {\r\n      _id: \"1\",\r\n      firstName: \"John\",\r\n      lastName: \"Doe\",\r\n      occupation: \"Software Engineer\",\r\n      picturePath: \"/images/john.jpg\",\r\n    },\r\n    {\r\n      _id: \"2\",\r\n      firstName: \"Jane\",\r\n      lastName: \"Doe\",\r\n      occupation: \"Graphic Designer\",\r\n      picturePath: \"/images/jane.jpg\",\r\n    },\r\n    {\r\n      _id: \"3\",\r\n      firstName: \"Alice\",\r\n      lastName: \"Smith\",\r\n      occupation: \"Data Scientist\",\r\n      picturePath: \"/images/alice.jpg\",\r\n    },\r\n  ];\r\n\r\n  const getFriends = async () => {\r\n    // Simulate fetching friends data from the server\r\n    // In a real application, you would replace this with actual API calls\r\n    // For now, we'll just set the state with the mock data\r\n    dispatch(setFriends({ friends: mockFriends }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFriends();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <WidgetWrapper>\r\n      <Typography\r\n        color={palette.neutral.dark}\r\n        variant=\"h5\"\r\n        fontWeight=\"500\"\r\n        sx={{ mb: \"1.5rem\" }}\r\n      >\r\n        Friend List\r\n      </Typography>\r\n      <Box display=\"flex\" flexDirection=\"column\" gap=\"1.5rem\">\r\n        {friends.map((friend) => (\r\n          <Friend\r\n            key={friend._id}\r\n            friendId={friend._id}\r\n            name={`${friend.firstName} ${friend.lastName}`}\r\n            subtitle={friend.occupation}\r\n            userPicturePath={friend.picturePath}\r\n          />\r\n        ))}\r\n      </Box>\r\n    </WidgetWrapper>\r\n  );\r\n};\r\n\r\nexport default FriendListWidget;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}